#!/usr/bin/env node

import { fileURLToPath, URL } from "node:url";
import { spawn } from 'child_process';
import chokidar from 'chokidar';
import { debounce } from 'lodash-es';

const SOURCE_DIR = fileURLToPath(new URL('../src', import.meta.url));

const SHELL_PATH = process.env.SHELL || process.env.COMSPEC;
const EXECUTE_OPTION = process.env.COMSPEC !== undefined && process.env.SHELL === undefined ? '/c' : '-c';

const EVENT_DESCRIPTIONS = {
    add: 'File added',
    addDir: 'Directory added',
    unlink: 'File removed',
    unlinkDir: 'Directory removed',
    change: 'File changed'
};

const CMD = 'npm run build';
const PATTERNS = SOURCE_DIR;
const DEBOUNCE_TIME = 400;

function main () {
    startWatching();
}

function startWatching () {
    const watcher = chokidar.watch(PATTERNS, {
        followSymlinks: false,
    });

    const debouncedRun = debounce(async () => {
        try {
            await run(CMD);
        } catch (error) {
            console.error('Error when executing', CMD);
            console.error(error.stack);
        }
    }, DEBOUNCE_TIME);

    watcher.on('all', (event, path) => {
        console.error(`${EVENT_DESCRIPTIONS[event]}:`, path);

        debouncedRun();
    });

    watcher.on('error', error => {
        console.error('Error:', error);
        console.error(error.stack);
    });

    watcher.once('ready', () => {
        console.error('Watching', `"${PATTERNS}"`);
    });
}

function run (cmd) {
    if (!SHELL_PATH) {
        // If we cannot resolve shell, better to just crash
        throw new Error('$SHELL environment variable is not set.');
    }

    return new Promise((resolve, reject) => {
        let child;

        try {
            child = spawn(SHELL_PATH, [EXECUTE_OPTION, cmd], {
                cwd: undefined,
                stdio: 'inherit',
            });
        } catch (error) {
            return reject(error);
        }

        function errorHandler(err) {
            child.removeListener('close', closeHandler);
            reject(err);
        }

        function closeHandler(exitCode) {
            child.removeListener('error', errorHandler);
            resolve(exitCode);
        }

        child.once('error', errorHandler);
        child.once('close', closeHandler);
    });
}

await main();
